#You are given an m x n grid where each cell can have one of three values:

# 0 representing an empty cell,
# 1 representing a fresh orange, or
# 2 representing a rotten orange.
# Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

# Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

# Example 1:


# Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
# Output: 4
# Example 2:

# Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
# Output: -1
# Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
# Example 3:

# Input: grid = [[0,2]]
# Output: 0
# Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

# Constraints:

# m == grid.length
# n == grid[i].length
# 1 <= m, n <= 10
# grid[i][j] is 0, 1, or 2.





class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();    // no.of rows of grid
        int n = grid[0].size(); // no.of columns of grid

        vector<vector<int>> visited; // to store visited nodes
        queue<pair<pair<int, int>, int>>
            q;     // to store the grid elements and time
        int t = 0; // time taken to rot

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    q.push({{i, j}, t});
                    visited[i][j] = 2;
                }
            }
        }

        int delrow[4] = {-1, 0, +1, 0};
        int delcol[4] = {0, +1, 0, -1};
        while (!q.empty()) {
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t = q.front().second;
            q.pop();

            for (int i = 0; i < 4; i++) {
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];

                if (nrow >= 0 && nrow <= m && ncol >= 0 && ncol <= m &&
                    visited[nrow][ncol] != 2 && grid[nrow][ncol] == 1) {
                    {
                        q.push({{nrow, ncol}, t + 1});
                        visited[nrow][ncol] == 1;
                    }
                }
            }

            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (visited[i][j] != 2 && grid[i][j] == 1) {
                        return -1;
                    }
                }
            }
        }
        return t;
    }
};
