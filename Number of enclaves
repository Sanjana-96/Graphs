
Question : You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.
A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.
#Return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.
Example 1:

Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.






class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> visited(m,vector<int>(n,0));
        queue<pair<int,int>> q;


       for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(i==0 || i==m-1 || j==0 || j==m-1 ){
                if(grid[i][j]==1 && visited[i][j]==0){
                    q.push({i,j});
                    visited[i][j]=1;
                }
            }
        }
       }
       int row=q.front().first;
       int col=q.front().second;
       q.pop();
      int delrow[4]={-1,0,+1,0};
      int delcol[4]={0,1,0,-1};

       while(!q.empty()){
           for(int i=0;i<4;i++){
            int nr=row+delrow[i];
            int nc=col+delcol[i];
            if(nr>=0 && nr<m && nc>=0 && nc<n && visited[nr][nc]==0 && grid[nr][nc]){
                q.push({nr,nc});
                visited[nr][nc]=1;
            } 
           }
       }
      int cnt=0;
      for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(grid[i][j]==1 && visited[i][j]==0){
                cnt++;
            }
        }
      }

    return cnt;
       
    }
};
