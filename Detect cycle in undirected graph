class Solution {
    bool detect(int i,  vector<vector<int>>& adj,vector<int>& vis){
        
        queue<pair<int,int>> q;
        q.push({i,-1});
        
        vis[i]=1;
        
        while(!q.empty()){
            
            int node= q.front().first;
            int parent= q.front().second;
            
            q.pop();
            for(auto it:adj[node]){
                if(vis[it]==0){
                   
                    vis[it]=1;
                     q.push({it,node});
                }
                else if(it!=parent){
                    return true;
                }
            }
        }
        return false;
        
    }
  public:
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<int>vis(V,0);
      
        
          vector<vector<int>> adj(V);
        
        //generating adjacency list
      for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                if (detect(i,adj,vis)) return true;
            }
        }
        return false;
    }
};
